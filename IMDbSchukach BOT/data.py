import aiohttp
import logging

API_BASE_URL = "https://api.imdbapi.dev"

async def search_imdb_titles(params: dict) -> dict:
    """
    –í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ –∞–±–æ –∑–∞–ø–∏—Ç —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—å–º—ñ–≤ –∑ IMDb.
    """
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE_URL}/search/titles", params=params) as resp:
                if resp.status != 200:
                    logging.error(f"API returned status {resp.status}")
                    return {"results": []}
                
                data = await resp.json()
                
                if "titles" in data:
                    return {"results": data["titles"]}
                elif "results" in data:
                    return {"results": data["results"]}
                else:
                    logging.error(f"Unexpected API response format: {data}")
                    return {"results": []}
                
    except aiohttp.ClientError as e:
        logging.error(f"Network error: {e}")
        return {"results": []}
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        return {"results": []}

def format_film_details(film, credits):
    # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ—ñ–ª—å–º
    title = film.get('primaryTitle', film.get('originalTitle', '–ù–∞–∑–≤–∞ –Ω–µ–≤—ñ–¥–æ–º–∞'))
    year = film.get('startYear', '?')
    rating_data = film.get('rating', {})
    rating = rating_data.get('aggregateRating', '?')
    vote_count = rating_data.get('voteCount', '?')
    plot = film.get('plot', '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')
    runtime = film.get('runtimeSeconds', 0)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —á–∞—Å—É –∑ —Å–µ–∫—É–Ω–¥ —É —Ö–≤–∏–ª–∏–Ω–∏
    if runtime:
        runtime = f"{runtime // 60} —Ö–≤"
    else:
        runtime = "?"
    
    # –ñ–∞–Ω—Ä–∏
    genres = ', '.join(film.get('genres', [])) or '–ù–µ–≤—ñ–¥–æ–º–æ'
    
    caption = (
        f"üé¨ <b>{title}</b>\n"
        f"üìÖ <b>–†—ñ–∫:</b> {year}\n"
        f"‚è≥ <b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {runtime}\n"
        f"üè∑Ô∏è <b>–ñ–∞–Ω—Ä:</b> {genres}\n"
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ IMDb:</b> {rating}/10 (–≥–æ–ª–æ—Å—ñ–≤: {vote_count})\n"
        f"üìù <b>–û–ø–∏—Å:</b> {plot}"
    )
    
    # –û–±—Ä–æ–±–∫–∞ –∞–∫—Ç–æ—Ä—ñ–≤ (—è–∫—â–æ credits –¥–æ—Å—Ç—É–ø–Ω—ñ)
    if credits and isinstance(credits, dict):
        actors = credits.get('cast', [])
        if actors:
            actor_names = []
            for actor in actors:
                if isinstance(actor, dict) and 'name' in actor:
                    actor_names.append(actor['name'])
                elif isinstance(actor, str):
                    actor_names.append(actor)
            
            if actor_names:
                caption += f"\n\nüé≠ <b>–ê–∫—Ç–æ—Ä–∏:</b> {', '.join(actor_names[:5])}"  # –ü–µ—Ä—à—ñ 5 –∞–∫—Ç–æ—Ä—ñ–≤
                if len(actor_names) > 5:
                    caption += f" —Ç–∞ —ñ–Ω—à—ñ..."
    
    return caption[:1024]  # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ –¥–æ 1024 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è Telegram